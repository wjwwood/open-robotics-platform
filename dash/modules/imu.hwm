"""
This is a hardware module to interface with our custom IMU.
"""

# Import some useful libraries
from threading import Timer
from time import sleep
from serial import Serial
from lib.hardware import SerialListener

class IMU(Device):
    """This class provides related functionality concerned with interfacing with our custom IMU"""
    def init(self):
        """Function called after object instantiation"""
        # Try to open the log file
        self.log_file = None
        try:
            self.log_file = open(self.config['log_file'], 'w')
        except KeyError as err:
            pass
        # Get the serial port name
        try:
            self.serial_port = self.config['serial']
        except KeyError as err:
            error('%s is missing a configuration.' % self.name)
            raise err
        # Try to open and configure the serial port
        try:
            self.serial = Serial()
            self.serial.port = self.serial_port
            self.serial.timeout = 0.4
            self.serial.baudrate = 115200
            self.serial.open()
        except Exception as err:
            error('Error opening/configuring the serial port for %s' % self.name)
            raise err
        # Synchronize with the IMU
        self.sync()
        # Setup a Serial Listener
        self.serial_listener = SerialListener(self.serial, self.log)
        self.serial_listener.addHandler(True, self.handleMessages)
        self.serial_listener.listen()
        # Initialize some variables
        self.calibrated = None
        self.polling = False
    
    def sync(self):
        """Attempts to synchronize with the IMU"""
        # Send the Calibrate command to ensure that the IMU is calibrating
        self.reset()
    
    def handleMessages(self, message):
        """Function for handling messages"""
        # Try to log the message
        self.logMessages(message)
        
        message = message.strip()
        if message == '':
            return
        
        # Handle messages
        if message[0] == 'R': # If the end of calibration
            self.calibrated = message
            self.triggerEvent('calibrated', message)
            debug('IMU Calibrated: %s' % message.strip())
        elif 'Calibrating - Start' in message:
            self.calibrated = None
            debug("IMU Calibrating")
        elif 'IMU Initialized!' in message:
            debug("IMU Reset")
        elif message[0] == 'p':
            self.triggerEvent('angleReceived', message.split('\t')[9])
        elif message[0] == 'g':
            self.triggerEvent('angleReceived', message.split('\t')[3])
        elif message[0] == 't' and message[1] == 'y':
            self.triggerEvent('targetAngleReached', message)
        else:
            debug('Unhandled IMU message: %s' % message.strip())
    
    def logMessages(self, message):
        """Logs the messages to a file"""
        try:
            if self.log_file != None:
                self.log_file.write(message)
        except Exception as err:
            error(err)
    
    def shutdown(self):
        """Called when the server shutsdown"""
        self.serial_listener.join()
        del self.serial_listener
    
    def start(self):
        """Called when Control Code Starts"""
        pass
    
    def stop(self):
        """Called when Control Code Stops"""
        self.pollOff()
    
    @expose
    def reset(self):
        """Resets the IMU"""
        self.serial.write('r')
    
    @expose
    def getAngle(self):
        """Polls the IMU for one angle, which will be returned in an event at a later point"""
        self.serial.write('g')
    
    @expose
    def pollOn(self):
        """Turns angle polling on if it isn't on already"""
        if not self.polling:
            self.polling = True
            self.serial.write('p')
    
    @expose
    def pollOff(self):
        """Turns angle polling off if it isn't off already"""
        if self.polling:
            self.polling = False
            self.serial.write('p')
    
    @expose
    def pollToggle(self):
        """Toggles angle polling, if it is off it will turn on, vica versa"""
        self.polling = not self.polling
        self.serial.write('p')
    
    @expose
    def zeroAngle(self):
        """Zeros the IMU"""
        self.serial.write('z')
    
    @expose
    def calibrate(self):
        """Calibrates the IMU, blocks until calibration is complete"""
        raise NotImplemented('Not Implemented, yet...')
    
    @expose
    def calibrateDeferred(self):
        """Calibrates the IMU, returns immediately and posts an event when complete"""
        self.serial.write('c')
    
    @expose
    def turnToAngle(self, destination_angle):
        """Instructs the IMU to turn to a specific angle, returns when the desired angle is reached"""
        raise NotImplemented('Not Implemented, yet...')
    
    @expose
    def turnToAngleDeferred(self, destination_angle):
        """Instructs the IMU to turn to a specific angle, returns immediately, and an event is generated when the target angle is reached"""
        command = 'ty'
        if destination_angle >= 0:
            command += '+'
        else:
            command += '-'
        angle_str = str(destination_angle)
        if len(angle_str) > 3:
            command += angle_str[-3:]
        elif len(angle_str) < 3:
            while len(angle_str) != 3:
                angle_str = '0'+angle_str
        command += angle_str
        self.zeroAngle()
        debug(command)
        # Seems like I'm sending the command too quickly
        from time import sleep
        for x in command:
            self.serial.write(x)
            sleep(0.3)
    